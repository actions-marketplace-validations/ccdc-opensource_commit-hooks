#!/usr/bin/env python3

from collections import defaultdict
import re
import subprocess


def _get_output(command, cwd='.'):
    return subprocess.check_output(command, shell=True, cwd=cwd).decode()


#def is_merge_commit():
#    output = _get_output(f'git cat-file -p {self.commit}')
#    if len([line for line in output.splitlines()
#            if line.startswith('parent')]) > 1:
#        return True
#    return False

def add_file_to_index(filename):
    '''Add file to current commit'''
    output = _get_output(f'git add {filename}')
    return output


def get_commit_files():
    '''List of files in current commit'''
    output = _get_output('git diff-index HEAD')
    result = defaultdict(list)
    for line in output.splitlines():
        parts = line.split()
        result[parts[-2]].append(parts[-1])
    return result


def get_modified_lines(modified_file):
    '''New and modified lines in modified file in current commit'''
    output = _get_output(f'git diff-index HEAD -p --unified=0 {modified_file}')
    lines = []
    for line in output.splitlines():
        if not line.startswith('@@'):
            continue
        match = get_modified_lines.pattern.match(line)
        start = int(match.group(1))
        if match.group(2):
            for num in range(int(match.group(3))):
                lines.append(start + num)
        else:
            lines.append(start)
    return lines
get_modified_lines.pattern = re.compile(r'^@@\s[^\s]+\s\+(\d+)(,(\d+))?\s@@.+')




def trim_trailing_whitespace(string):
    '''Return a string with trailing white spaces removed'''
    return trim_trailing_whitespace.pattern.sub(r"\1", string)
trim_trailing_whitespace.pattern = re.compile(r"\s*?(\r?\n|$)")


def trim_trailing_whitespace_in_file(filename, new_file=False):
    '''Remove trailing white spaces in new and modified lines in a filename'''
    with open(filename, 'rb') as fileobj:
        lines = fileobj.read().decode().splitlines(True)

    if new_file:
        line_nums = range(1, len(lines)+1)
    else:
        line_nums = get_modified_lines(filename)

    modified_file = False

    for line_num in line_nums:
        try:
            before = lines[line_num-1]
        except IndexError as exc:
            print(f'Error {exc}: {line_num-1} in {filename}')
            continue
        after = trim_trailing_whitespace(before)
        if before != after:
            print(f'   Fixed line {line_num}')
            modified_file = True
            lines[line_num-1] = after

    if modified_file:
        with open(filename, 'wb') as fileobj:
            lines = ''.join(lines)
            fileobj.write(lines.encode())
        add_file_to_index(filename)


def remove_trailing_white_space(files, new_files=False):
    '''Remove trailing white spaces in all new and modified lines'''
    for filename in files:
        print(f'  Checking file {filename}')
        trim_trailing_whitespace_in_file(filename, new_files)




def main():
    print(f'Running pre-commit hook {__file__}')

    files = get_commit_files()

    print(' Auto remove trailing white space ...')
    remove_trailing_white_space(files['M'])
    remove_trailing_white_space(files['A'], new_files=True)

    print('Done running pre-commit hook')
    retval = 0
    return retval


if __name__ == '__main__':
    exit(main())
